<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CustomerTable extends Doctrine_Table
{
  /**
   * simplify a string for matching
   *
   * @return string
   * @author Enrique Martinez
   **/
  public static function slugify($text)
  {
    $text = iconv("UTF-8", "US-ASCII//TRANSLIT", $text);
    $text = preg_replace('/\W+/', null, $text);
    $text = strtolower(trim($text));
    
    return $text;
  }

  /**
   * checks if there is a match in customer identification
   * on the client table
   *
   * @return Client  -- the client matched
   * @author Enrique Martinez
   **/
  public function matchIdentification($text)
  {
    $customer = $this->findOneBy('IdentificationSlug', self::slugify($text));
      
    return $customer;
  }
  
  /**
   * checks if there is a match in customer name
   * on the client table
   *
   * @return Client  -- the client matched
   * @author Enrique Martinez
   **/
  public function matchName($text)
  {
    $customer = $this->findOneBy('NameSlug', self::slugify($text));
      
    return $customer;
  }
  
  /**
   * Updates a Customer object matching the object's data.
   *
   * @return void
   * @author Carlos Escribano <carlos@markhaus.com>
   **/
  public function updateCustomer($obj)
  {
    $customer = $this->getCustomerMatch($obj);
    if($customer->isNew())
    {
      $customer->setDataFrom($obj);
    }
    $obj->setCustomer($customer);
    $customer->save();
  }
  
  /**
   * gets the customer that matches the invoice data
   * If no match returns a new Customer object
   *
   * @param Invoice|RecurringInvoice -- the invoice or the recurring one.
   * @return Customer  -- the customer matched
   * @author Enrique Martinez
   **/
  public function getCustomerMatch($invoice)
  {
    if($invoice->getCustomerId())
    {
      return $invoice->getCustomer();
    }
    
    if($invoice->getCustomerIdentification())
    {
      if($customer = $this->matchIdentification($invoice->getCustomerIdentification()))
      {
        return $customer;
      }
      
      return new Customer();
    }
    
    if($customer = $this->matchName($invoice->getCustomerName()))
    {
      return $customer;
    }
    
    return new Customer();
  }
  
  /**
   * method for ajax request
   *
   * @return array
   * @author Enrique Martinez
   **/
  public function retrieveForSelect($q, $limit)
  {
    $items = $this->createQuery()
      ->where('name LIKE ?', '%'.$q.'%')
      ->limit($limit)
      ->execute();
    
    $res = array();
    $i = 0;
    foreach ($items as $item)
    {
      $res[$i]['id'] = $item->getId();
      $res[$i]['customer'] = $item->getName();
      $res[$i]['customer_identification'] = $item->getIdentification();
      $res[$i]['customer_email'] = $item->getEmail();
      $res[$i]['contact_person'] = $item->getContactPerson();
      $res[$i]['invoicing_address'] = $item->getInvoicingAddress();
      $res[$i]['shipping_address'] = $item->getShippingAddress();
      $i++;
    }
    
    return $res;
  }
  
  /**
   * method for ajax request
   * This is for the search form
   *
   * @return array
   * @author Enrique Martinez
   **/
  public function simpleRetrieveForSelect($q, $limit)
  {
    $items = Doctrine::getTable('Customer')->createQuery()
      ->where('name LIKE ?', '%'.$q.'%')
      ->limit($limit)
      ->execute();
    
    $res = array();
    foreach ($items as $item)
    {
      $res[$item->getId()] = $item->getName();
    }
    
    return $res;
  }
  
  public function getNonDraftInvoices($customer_id,$date_range = array()) {

    $search = array_merge(array('customer_id'=>$customer_id),$date_range);
    $q = InvoiceQuery::create()->search($search)->andWhere('i.draft = 0');
    return $q->execute();
  }
  
  public static function getCustomerName($customer_id = null)
  {
    if ($customer_id)
    {
      $customer = Doctrine::getTable('Customer')->findOneById($customer_id);
      if ($customer)
      {
        return $customer->getName();
      }
    }

    return '';
  }

}